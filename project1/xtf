#!/bin/bash

timeFilterFormat='^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'
currencyFormat='^[A-Z]{3}$'

function userFilter(){
	if [[ $user == "" ]]
	then
		awk '{print}'
	else
		awk -v filter=$user 'BEGIN {FS = ";"}
		{if (filter == $1) {print}}'
	fi
}

function currencyFilter(){
	local arr=("$@")
	temp=${arr[@]}
	if [[ ${arr} == "" ]]
	then
		awk '{print}'
	else
		awk -v "filterString=$temp" 'BEGIN{split(filterString, filterArr); FS = ";"} {for (i in filterArr) { if (filterArr[i] == $3) print } }'
	fi
}

function timeFilterAfter(){
	if [[ $timeFilterAfter == ""  ]]
	then
		awk '{print}'
	else
		awk -v filter="$timeFilterAfter" 'BEGIN {FS = ";"}
		{if (filter < $2) {print}}'
	fi
}

function timeFilterBefore(){
	if [[ $timeFilterBefore == "" ]]
	then
		awk '{print}'
	else
		awk -v filter="$timeFilterBefore" 'BEGIN {FS = ";"}
		{if (filter > $2) {print}}'
	fi
}

argValueString="$@"
argValues=($argValueString)
argCount=(${#argValues[@]})

if [[ ${argValues[0]} == "-h" || ${argValues[0]} == "--help" ]]
then
	echo    'Command syntax: xtf [-h|--help] [FILTER] [CMD] USER LOG
	Where -h or --help prints out this help message
	Where FILTER sets the filter which you wish to use it can be a combination of the following:
		-a DATETIME in the following format YYYY-MM-DD HH:MM:SS to output all the entries after the specified date and time
		-b DATETIME in the following format YYYY-MM-DD HH:MM:SS to output all the entrier after the specified date and time
		-c CURRENCY to output entries containing only the specified currency
	Where CMD specifies the command you wish to use and can be any of the following:
		list to output all entries for the given user
		list-currency to output all entries for the given currency
		status to output the status of an account, sorted and grouped by currency
		profit to output the status of an account with added profits'

	exit 0
fi

currencyCount=0
for ((i=0; i < argCount; i++))
do
	currentArg=${argValues[i]}
	case $currentArg in
		"-c")
			((i++))

			if ! [[ ${argValues[$i]} =~ $currencyFormat ]]
			then
				echo "ERROR INCORRECT CURRENCY FORMAT" >&2
				exit 1
			fi

			if [[ $currencies == "" ]]
			then
				currencies=(${argValues[(($i))]})
			else
				currencies+=(${argValues[(($i))]})
			fi
			;;
		"-b")
			if [[ $timeFilterBefore != "" ]]
				then
					echo "ERROR: attempted to set multiple before time filters" >&2
					exit 1
			fi
			((i++))
			timeFilterBefore="${argValues[(($i))]} ${argValues[(($i+1))]}"
			((i++))
			if ! [[ $timeFilterBefore =~ $timeFilterFormat ]]
			then
				echo "ERROR INCORRECT TIMEFILTER FORMAT" >&2
				exit 1
			fi
			;;
		"-a")
			if [[ $timeFilterAfter != "" ]]
				then
					echo "ERROR: attempted to set multiple after time filters" >&2
					exit 1
			fi
			((i++))
			timeFilterAfter="${argValues[(($i))]} ${argValues[(($i+1))]}"
			((i++))
			if ! [[ $timeFilterAfter =~ $timeFilterFormat ]]
			then
				echo "ERROR INCORRECT TIMEFILTER FORMAT" >&2
				exit 1
			fi
			;;
		"list"|"list-currency"|"status"|"profit")
			if [ -z "${cmd+x}" ]
			then
				cmd=$currentArg
			else
				echo "ERROR TOO MANY CMDS" >&2
				exit 1
			fi
			;;
		*)
			if [[ -f $currentArg || -e $currentArg ]]
			then
				logs+=($currentArg)
			else
				user=$currentArg
			fi
			;;
	esac
done

if [[ ${logs[@]} == "" ]]
then
	echo "ERROR NO FILE OR INVALID FILE PASSED TRY AGAIN :)" >&2
	exit 1
fi

if [[ $cmd == "" ]]
then
	if [[ $user == "" ]]
	then
		echo "ERROR NO USER AND ARG PASSED, WHATCHU WANT ME TO DO??" >&2
		exit 1
	fi
	
	cmd="list"
fi

for i in ${logs[@]}
do
	if [[ "$i" == *.gz ]]
	then
		check=$(gunzip -c "$i" | awk -v lineFormat="^[^;][^ ]*;[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9];[A-Z][A-Z][A-Z];-?[0-9]+\.[0-9][0-9][0-9][0-9]$" '($0 !~ lineFormat) {print 1}')
	else
		check=$(awk -v lineFormat="^[^;][^ ]*;[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9];[A-Z][A-Z][A-Z];-?[0-9]+\.[0-9][0-9][0-9][0-9]$" '($0 !~ lineFormat) {print 1}' "$i")
	fi

	if [[ $check == 1 ]]
	then
		echo "ERROR INVALID FILE FORMAT" >&2
		exit 1
	fi
done

case $cmd in
	"list")
		for i in ${logs[@]}
		do
			if [[ $i == *.gz ]]
			then
				gunzip -c "$i" | awk 'BEGIN {FS = ";"} {print}' | userFilter | currencyFilter "${currencies[@]}" | timeFilterBefore | timeFilterAfter
			else
				awk 'BEGIN {FS = ";"} {print}' "$i" | userFilter | currencyFilter "${currencies[@]}" | timeFilterBefore | timeFilterAfter
			fi
		done
		exit 0
	;;
	"list-currency")
		for i in ${logs[@]}
		do
			if [[ "$i" == *.gz ]]
			then
				gunzip -c "$i" | awk 'BEGIN {FS = ";"} {print}' | userFilter | currencyFilter "${currencies[@]}" | timeFilterBefore | timeFilterAfter | awk 'BEGIN {FS = ";"} {print $3}' | sort -u
			else
				awk 'BEGIN {FS = ";"} {print}' "$i" | userFilter | currencyFilter "${currencies[@]}" | timeFilterBefore | timeFilterAfter | awk 'BEGIN {FS = ";"} {print $3}' | sort -u
			fi
		done
		exit 0
	;;
	"status")

		if [ -z $user ]
		then
			echo "ERROR NO USER PASSED" >&2
			exit 1
		fi

		#fetch every unique currency, put it into an array

		for i in ${logs[@]}
		do
			if [[ "$i" == *.gz ]]
			then
				currencyArray+=($(gunzip -c "$i" | awk 'BEGIN {FS = ";"} {print}' | userFilter | currencyFilter "${currencies[@]}" | timeFilterBefore | timeFilterAfter | awk 'BEGIN {FS = ";"} {print $3}'))
			else
				currencyArray+=($(awk 'BEGIN {FS = ";"} {print}' "$i" | userFilter | currencyFilter "${currencies[@]}" | timeFilterBefore | timeFilterAfter | awk  'BEGIN {FS = ";"} {print $3}'))
			fi
		done

		currencyArray=($(printf "%s\n" "${currencyArray[@]}" | sort -u))
		
		#for each currency in array

		for i in ${currencyArray[@]}
			do

				#print its amount in every transaction to an array of amounts

				for j in ${logs[@]}
				do
					if [[ "$j" == *.gz  ]]
					then
						amtArray+=($(gunzip -c "$j" | awk 'BEGIN {FS = ";"} {print}' | userFilter | timeFilterBefore | timeFilterAfter | awk -v currency=$i 'BEGIN {FS = ";"} ($3 ~ currency) {print $4}'))
					else
						amtArray+=($(awk 'BEGIN {FS=";"} {print}' "$j" | userFilter | timeFilterBefore | timeFilterAfter | awk -v currency=$i 'BEGIN {FS = ";"} ($3 ~ currency) {print $4}'))
					fi
				done

				#set amt to 0, otherwise bc gets an error expecting an operand

				amt=0
				for j in ${amtArray[@]}
				do
					amt=$(bc <<< $amt+$j)
				done

				#echo i = currency and amt = status

				echo $i ":" $amt

				amtArray=()
			done
		exit 0
	;;
	"profit")

		if [ -z $user ]
		then
			echo "ERROR NO USER PASSED" >&2
			exit 1
		fi

		for i in ${logs[@]}
		do
			if [[ "$i" == *.gz ]]
			then
				currencyArray+=($(gunzip -c "$i" | awk 'BEGIN {FS = ";"} {print}' | userFilter | currencyFilter "${currencies[@]}" timeFilterBefore | timeFilterAfter | awk 'BEGIN {FS = ";"} {print $3}' | sort -u))
			else
				currencyArray+=($(awk 'BEGIN {FS = ";"} {print }' ${logs[@]} | userFilter | currencyFilter "${currencies[@]}" | timeFilterBefore | timeFilterAfter | awk 'BEGIN {FS = ";"} {print $3}' | sort -u))
			fi
		done

		currencyArray=($(printf "%s\n" "${currencyArray[@]}" | sort -u))

		for i in ${currencyArray[@]}
			do
				for j in ${logs[@]}
				do
					if [[ "$j" == *.gz ]]
					then
						amtArray+=($(gunzip -c "$j" | awk 'BEGIN {FS = ";"} {print}' | userFilter | timeFilterBefore | timeFilterAfter | awk -v currency=$i 'BEGIN {FS = ";"} ($3 ~ currency) {print $4}'))
					else
						amtArray+=($(awk 'BEGIN {FS = ";"} {print}' ${logs[@]} | userFilter | timeFilterBefore | timeFilterAfter | awk -v currency=$i 'BEGIN {FS = ";"} ($3 ~ currency) {print$4}'))
					fi
				done
				amt=0
				for j in ${amtArray[@]}
					do
						amt=$(bc <<< $amt+$j)
					done

				if awk "BEGIN {exit !($amt > 0)}"
					then

					#if XTF_PROFIT isn't set

					if [[ -z ${XTF_PROFIT} ]]
						then
							#set XTF_PROFIT to 1.2 AKA 20% increase

							profit=1.2
						else
							profit=$(awk -v profit=$XTF_PROFIT 'BEGIN{print (100+profit)/100}')
					fi

					#set amt to amt*XTF_PROFIT

					amt=$(awk -v profit="$profit" -v amt="$amt" 'BEGIN{printf "%.4f", (amt * profit)}')

				fi

				#echo currency and amt modified by profit

				echo $i ":" "$amt"|tr ',' '.'
				amtArray=()
			done
	;;
	*)
		echo "Invalid command error"
		exit 1
	;;
esac

exit 0
